#pragma region OldItemInputProcess
	//// add 0x prefix to content
	//if ((colunum == 0 || colunum == 3) && !Item->text().isEmpty() && !Item->text().startsWith("0x"))
	//{
	//	QString data = Item->text();
	//	Item->setText("0x" + Item->text());
	//}
	//// Set target vaule is can't edit when Judgement is change or constant
	//if (colunum==2 && (Item->text()=="change" || Item->text() == "constant"))
	//{
	//	QStandardItem *Targetitem = new QStandardItem;
	//	Targetitem->setEditable(false);
	//	Targetitem->setText("constant/change");
	//	Item->model()->setItem(row, 3, Targetitem);
	//}
	//else
	//{
	//	if (Item->model()->item(row,3))
	//	{
	//		Item->model()->item(row, 3)->setEditable(true);
	//	}
	//	else
	//	{
	//		QStandardItem *Targetitem = new QStandardItem;
	//		Targetitem->setEditable(true);
	//		Item->model()->setItem(row, 3, Targetitem);
	//	}
	//}
	//// Check the bit width input
	//if (colunum == 1 && !Item->text().isEmpty())
	//{
	//	QStringList num  = Item->text().split('-');
	//	if (num.count()!=2)
	//	{
	//		QMessageBox::critical(this, "Input error", "The Bit Width input is must be two number");
	//		Item->setText("");
	//	}
	//	if (num[0].toUInt()<num[1].toUInt())
	//	{
	//		QMessageBox::critical(this, "Input error", "The Bit Width input is must the order by high bit to low bit");
	//		Item->setText("");
	//	}
	//}
	//unsigned int itemcontentcount = 0;
	//for (size_t i = 0; i < 4; i++)
	//{
	//	if (Item->model()->item(row, i))
	//	{
	//		if (!Item->model()->item(row, i)->text().isEmpty())
	//			itemcontentcount++;
	//	}
	//}
	//// Set the check item empty
	//if (itemcontentcount == 0)
	//{
	//	Item->model()->item(row, 4)->setText("");
	//	Item->model()->item(row, 4)->setBackground(QBrush(QColor(qRgb(255, 255, 255))));
	//	m_isLegalFlag = true;
	//}
	//// Set the check item is Need Complete status
	//else if (itemcontentcount!=4)
	//{
	//	Item->model()->item(row, 4)->setText("Need Complete");
	//	Item->model()->item(row, 4)->setBackground(QBrush(QColor(qRgb(255, 0, 0))));
	//	m_isLegalFlag = false;
	//}
	//// Set the check item is legal status
	//else
	//{
	//	Item->model()->item(row, 4)->setText("legal");
	//	m_isLegalFlag = true;
	//	Item->model()->item(row, 4)->setBackground(QBrush(QColor(qRgb(40, 200, 11))));
	//}
	#pragma endregion
	#pragma region OldCleanItemInputProcess
	/*if (item->column()==1 )
	{
		if (item->model() && item->model() == &this->m_RecordCmdListModel)
		{
			disconnect(&this->m_RecordCmdListModel, &QStandardItemModel::itemChanged, this, &MainWindow::CleanAndRecordCmdEditFinish);
		}
		else if (item->model() && item->model() == &this->m_CleanCmdListModel)
		{
			disconnect(&this->m_CleanCmdListModel, &QStandardItemModel::itemChanged, this, &MainWindow::CleanAndRecordCmdEditFinish);
		}
		if (item->model()->item(item->row(), 0) && !item->model()->item(item->row(),0)->text().isEmpty() 
			&& !item->text().startsWith(item->model()->item(item->row(), 0)->text()) && item->model() == &m_CleanCmdListModel)
		{
			QString  addressdata;
			QString  Vaule;
			if (item->model()->item(item->row(), 0)->text()=="hwyFpga w")
			{

				QList<QString> datatemp = item->text().split(",");
				if (datatemp.length() != 2)
				{
					QMessageBox::critical(this, "Input Error", "The input data have illegal item,the input must be two digtal number between a symbol ,");
					item->setText("");
				}
				else
				{
					addressdata = datatemp[0];
					Vaule = datatemp[1];
					addressdata = "0x" + addressdata;
					Vaule = "0x" + Vaule;
					item->setText(item->model()->item(item->row(), 0)->text() + " " + addressdata + " " + Vaule);
				}
				
			}
			else
			{
				item->setText(item->model()->item(item->row(), 0)->text());
			}
			
		}
		if (item->model()->item(item->row(), 0) && !item->model()->item(item->row(), 0)->text().isEmpty()
			&& !item->text().startsWith(item->model()->item(item->row(), 0)->text()) && item->model() == &m_RecordCmdListModel)
		{
			QString  addressdata;
			QString  Vaule;
			if (item->model()->item(item->row(), 0)->text() == "hwyFpga r")
			{
				addressdata = "0x" + item->text();
				item->setText(item->model()->item(item->row(), 0)->text() + " " + addressdata);
			}
			else if (item->model()->item(item->row(), 0)->text() == "hwyFpga dump")
			{
				QList<QString> datatemp = item->text().split(",");
				if (datatemp.length() != 2)
				{
					QMessageBox::critical(this, "Input Error", "The input data have illegal item,the input must be two digtal number between a symbol ,");
					item->setText("");
				}
				else 
				{
					addressdata = datatemp[0];
					Vaule = datatemp[1];
					addressdata = "0x" + addressdata;
					Vaule = "0x" + Vaule;
					item->setText(item->model()->item(item->row(), 0)->text() + " " + addressdata + " " + Vaule);
				}
			}
			else
			{
				item->setText(item->model()->item(item->row(), 0)->text());
			}
		}
	}
	else if (item->column() == 0)
	{
		if (item->model()->item(item->row(), 0) && !item->model()->item(item->row(), 0)->text().isEmpty())
		{
			if (item->model()->item(item->row(), 0)->text() == "vcaHandler txPowerRead")
			{
				item->model()->setItem(item->row(), 1, new QStandardItem("vcaHandler txPowerRead"));
			}
			else if (item->model()->item(item->row(), 0)->text() == "lmclist")
			{
				item->model()->setItem(item->row(), 1, new QStandardItem("lmclist"));
			}
		}
	}*/
	#pragma endregion